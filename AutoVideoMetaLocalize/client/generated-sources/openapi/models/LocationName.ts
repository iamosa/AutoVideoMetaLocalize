/* tslint:disable */
/* eslint-disable */
/**
 * AutoVideoMetaLocalize
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ResourceNameType,
    ResourceNameTypeFromJSON,
    ResourceNameTypeFromJSONTyped,
    ResourceNameTypeToJSON,
    UnparsedResourceName,
    UnparsedResourceNameFromJSON,
    UnparsedResourceNameFromJSONTyped,
    UnparsedResourceNameToJSON,
} from './';

/**
 * 
 * @export
 * @interface LocationName
 */
export interface LocationName {
    /**
     * 
     * @type {ResourceNameType}
     * @memberof LocationName
     */
    type?: ResourceNameType;
    /**
     * 
     * @type {UnparsedResourceName}
     * @memberof LocationName
     */
    unparsedResource?: UnparsedResourceName;
    /**
     * 
     * @type {string}
     * @memberof LocationName
     */
    readonly locationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LocationName
     */
    readonly projectId?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof LocationName
     */
    readonly isKnownPattern?: boolean;
}

export function LocationNameFromJSON(json: any): LocationName {
    return LocationNameFromJSONTyped(json, false);
}

export function LocationNameFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationName {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : ResourceNameTypeFromJSON(json['type']),
        'unparsedResource': !exists(json, 'unparsedResource') ? undefined : UnparsedResourceNameFromJSON(json['unparsedResource']),
        'locationId': !exists(json, 'locationId') ? undefined : json['locationId'],
        'projectId': !exists(json, 'projectId') ? undefined : json['projectId'],
        'isKnownPattern': !exists(json, 'isKnownPattern') ? undefined : json['isKnownPattern'],
    };
}

export function LocationNameToJSON(value?: LocationName | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': ResourceNameTypeToJSON(value.type),
        'unparsedResource': UnparsedResourceNameToJSON(value.unparsedResource),
    };
}


