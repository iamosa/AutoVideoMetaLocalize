/* tslint:disable */
/* eslint-disable */
/**
 * AutoVideoMetaLocalize
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LocationName,
    LocationNameFromJSON,
    LocationNameFromJSONTyped,
    LocationNameToJSON,
    TranslateTextGlossaryConfig,
    TranslateTextGlossaryConfigFromJSON,
    TranslateTextGlossaryConfigFromJSONTyped,
    TranslateTextGlossaryConfigToJSON,
} from './';

/**
 * 
 * @export
 * @interface TranslateTextRequest
 */
export interface TranslateTextRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof TranslateTextRequest
     */
    readonly contents?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof TranslateTextRequest
     */
    mimeType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TranslateTextRequest
     */
    sourceLanguageCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TranslateTextRequest
     */
    targetLanguageCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TranslateTextRequest
     */
    parent?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TranslateTextRequest
     */
    model?: string | null;
    /**
     * 
     * @type {TranslateTextGlossaryConfig}
     * @memberof TranslateTextRequest
     */
    glossaryConfig?: TranslateTextGlossaryConfig;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof TranslateTextRequest
     */
    readonly labels?: { [key: string]: string; } | null;
    /**
     * 
     * @type {LocationName}
     * @memberof TranslateTextRequest
     */
    parentAsLocationName?: LocationName;
}

export function TranslateTextRequestFromJSON(json: any): TranslateTextRequest {
    return TranslateTextRequestFromJSONTyped(json, false);
}

export function TranslateTextRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TranslateTextRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contents': !exists(json, 'contents') ? undefined : json['contents'],
        'mimeType': !exists(json, 'mimeType') ? undefined : json['mimeType'],
        'sourceLanguageCode': !exists(json, 'sourceLanguageCode') ? undefined : json['sourceLanguageCode'],
        'targetLanguageCode': !exists(json, 'targetLanguageCode') ? undefined : json['targetLanguageCode'],
        'parent': !exists(json, 'parent') ? undefined : json['parent'],
        'model': !exists(json, 'model') ? undefined : json['model'],
        'glossaryConfig': !exists(json, 'glossaryConfig') ? undefined : TranslateTextGlossaryConfigFromJSON(json['glossaryConfig']),
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'parentAsLocationName': !exists(json, 'parentAsLocationName') ? undefined : LocationNameFromJSON(json['parentAsLocationName']),
    };
}

export function TranslateTextRequestToJSON(value?: TranslateTextRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mimeType': value.mimeType,
        'sourceLanguageCode': value.sourceLanguageCode,
        'targetLanguageCode': value.targetLanguageCode,
        'parent': value.parent,
        'model': value.model,
        'glossaryConfig': TranslateTextGlossaryConfigToJSON(value.glossaryConfig),
        'parentAsLocationName': LocationNameToJSON(value.parentAsLocationName),
    };
}


