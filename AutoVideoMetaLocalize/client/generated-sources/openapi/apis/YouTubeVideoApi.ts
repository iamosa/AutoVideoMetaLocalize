/* tslint:disable */
/* eslint-disable */
/**
 * AutoVideoMetaLocalize
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ChartEnum,
    ChartEnumFromJSON,
    ChartEnumToJSON,
    MyRatingEnum,
    MyRatingEnumFromJSON,
    MyRatingEnumToJSON,
    Video,
    VideoFromJSON,
    VideoToJSON,
    VideoListResponse,
    VideoListResponseFromJSON,
    VideoListResponseToJSON,
} from '../models';

export interface ApiYouTubeVideoListGetRequest {
    videoCategoryId?: string | null;
    regionCode?: string | null;
    pageToken?: string | null;
    onBehalfOfContentOwner?: string | null;
    myRating?: MyRatingEnum;
    maxWidth?: number | null;
    maxResults?: number | null;
    maxHeight?: number | null;
    locale?: string | null;
    id?: string | null;
    hl?: string | null;
    chart?: ChartEnum;
    part?: string | null;
}

export interface ApiYouTubeVideoUpdatePostRequest {
    part: string;
    video: Video;
}

/**
 * no description
 */
export class YouTubeVideoApi extends runtime.BaseAPI {

    /**
     */
    async apiYouTubeVideoListGetRaw(requestParameters: ApiYouTubeVideoListGetRequest): Promise<runtime.ApiResponse<VideoListResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.videoCategoryId !== undefined) {
            queryParameters['VideoCategoryId'] = requestParameters.videoCategoryId;
        }

        if (requestParameters.regionCode !== undefined) {
            queryParameters['RegionCode'] = requestParameters.regionCode;
        }

        if (requestParameters.pageToken !== undefined) {
            queryParameters['PageToken'] = requestParameters.pageToken;
        }

        if (requestParameters.onBehalfOfContentOwner !== undefined) {
            queryParameters['OnBehalfOfContentOwner'] = requestParameters.onBehalfOfContentOwner;
        }

        if (requestParameters.myRating !== undefined) {
            queryParameters['MyRating'] = requestParameters.myRating;
        }

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['MaxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['MaxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['MaxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.locale !== undefined) {
            queryParameters['Locale'] = requestParameters.locale;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['Id'] = requestParameters.id;
        }

        if (requestParameters.hl !== undefined) {
            queryParameters['Hl'] = requestParameters.hl;
        }

        if (requestParameters.chart !== undefined) {
            queryParameters['Chart'] = requestParameters.chart;
        }

        if (requestParameters.part !== undefined) {
            queryParameters['Part'] = requestParameters.part;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/YouTubeVideo/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoListResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiYouTubeVideoListGet(requestParameters: ApiYouTubeVideoListGetRequest): Promise<VideoListResponse> {
        const response = await this.apiYouTubeVideoListGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiYouTubeVideoUpdatePostRaw(requestParameters: ApiYouTubeVideoUpdatePostRequest): Promise<runtime.ApiResponse<Video>> {
        if (requestParameters.part === null || requestParameters.part === undefined) {
            throw new runtime.RequiredError('part','Required parameter requestParameters.part was null or undefined when calling apiYouTubeVideoUpdatePost.');
        }

        if (requestParameters.video === null || requestParameters.video === undefined) {
            throw new runtime.RequiredError('video','Required parameter requestParameters.video was null or undefined when calling apiYouTubeVideoUpdatePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.part !== undefined) {
            queryParameters['part'] = requestParameters.part;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/YouTubeVideo/Update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VideoToJSON(requestParameters.video),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoFromJSON(jsonValue));
    }

    /**
     */
    async apiYouTubeVideoUpdatePost(requestParameters: ApiYouTubeVideoUpdatePostRequest): Promise<Video> {
        const response = await this.apiYouTubeVideoUpdatePostRaw(requestParameters);
        return await response.value();
    }

}
