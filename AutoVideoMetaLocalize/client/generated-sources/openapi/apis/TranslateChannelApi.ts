/* tslint:disable */
/* eslint-disable */
/**
 * AutoVideoMetaLocalize
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface ApiTranslateChannelTranslateChannelPostRequest {
    channelId: string;
    languages: Array<string>;
}

/**
 * no description
 */
export class TranslateChannelApi extends runtime.BaseAPI {

    /**
     */
    async apiTranslateChannelTranslateChannelPostRaw(requestParameters: ApiTranslateChannelTranslateChannelPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling apiTranslateChannelTranslateChannelPost.');
        }

        if (requestParameters.languages === null || requestParameters.languages === undefined) {
            throw new runtime.RequiredError('languages','Required parameter requestParameters.languages was null or undefined when calling apiTranslateChannelTranslateChannelPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.languages) {
            formParams.append('languages', requestParameters.languages.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        const response = await this.request({
            path: `/api/TranslateChannel/translate-channel`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTranslateChannelTranslateChannelPost(requestParameters: ApiTranslateChannelTranslateChannelPostRequest): Promise<void> {
        await this.apiTranslateChannelTranslateChannelPostRaw(requestParameters);
    }

}
